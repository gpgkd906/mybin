(setq inferior-lisp-program "gcl")
(add-to-list 'load-path "~/.emacs.d/")
(autoload 'php-mode "php-mode" "Major mode for editing php code." t)
(add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.inc$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . javascript-mode))
;;extend my php-keyset
(add-hook 'php-mode-hook
          (lambda ()
            (setq tab-width 4)
            (setq indent-tabs-mode t)
            (setq c-basic-offset 4)
            (c-set-offset 'case-label' 4)
            (c-set-offset 'arglist-intro' 4)
            (c-set-offset 'arglist-cont-nonempty' 4)
	    (global-set-key (kbd "C-: C-p") 
			    (lambda ()
			      (interactive)
			      (setq varname (read-string "auto generate var define, Input var name :"))
			      (insert (format "/**\n *\n * @api\n * @var \n * @link\n */\n    public $%s = ;\n" varname varname))
			      ))
	    (global-set-key (kbd "C-: C-o") 
			    (lambda ()
			      (interactive)
			      (setq funcname (read-string "auto generate function define, Input function name :"))
			      (insert (format "/**\n * \n * @api\n * @param   \n * @param    \n * @return\n * @link\n */\n    public function %s () {\n\n    }\n" funcname funcname))
			      ))
	    (global-set-key (kbd "C-: C-;")
			    (lambda ()
			      (interactive)
			      (setq class-name (read-string "class define, Input class name :"))
			      (insert (format "/**\n * %s\n *\n * myFramework : Origin Framework by Chen Han https://github.com/gpgkd906/framework\n *\n * Copyright %s Chen Han\n *\n * Licensed under The MIT License\n *\n * @copyright Copyright %s Chen Han\n * @link\n * @since\n * @license http://www.opensource.org/licenses/mit-license.php MIT License\n */\n/**\n * %s\n * \n *\n * @author %s Chen Han \n * @package framework.\n * @link \n */\nclass %s {\n\n}" class-name (format-time-string "%Y") (format-time-string "%Y") class-name (format-time-string "%Y") class-name))
			      ))
	    (global-set-key (kbd "C-: TAB") 
			    (lambda ()
			      (interactive)
			      (let ((inputed-tuple (split-string (read-string "insert for (v[ar]/f[unc]/c[lass]/p[ackage])[:name]? ") ":")))
				(setq mode (car inputed-tuple))
				(setq name (cadr inputed-tuple))
				(cond ((null mode)
				       (message "nothing inputed!"))
				      ((equal mode "v")
				       (insert (format "/**\n	*\n	 * @api\n	 * @var \n * @link\n	 */\n" name)))
				      ((equal mode "f")
				       (insert (format "/**\n	 * \n	 * @api\n	 * @param   \n	 * @param    \n	 * @return\n	 * @link\n	 */\n" name)))
				      ((equal mode "c")
				       (insert (format "/**\n * %s\n * \n *\n * @author %s Chen Han \n * @package framework.\n * @link \n */\n" name (format-time-string "%Y"))))
				      ((equal mode "p")
				       (insert (format "/**\n * %s\n *\n * myFramework : Origin Framework by Chen Han https://github.com/gpgkd906/framework\n *\n * Copyright %s Chen Han\n *\n * Licensed under The MIT License\n *\n * @copyright Copyright %s Chen Han\n * @link\n * @since\n * @license http://www.opensource.org/licenses/mit-license.php MIT License\n */\n" name (format-time-string "%Y") (format-time-string "%Y"))))
				      (t nil)
				      ))))
            ))
;;extend my js-keyset
(add-hook 'js-mode-hook
	  ;;keyset for jsduck
	  (lambda ()
	    (global-set-key (kbd "C-: C-p") 
			    (lambda ()
			      (interactive)
			      (setq varname (read-string "auto generate var define, Input var name :"))
			      (insert (format "/**\n * @member \n * @property %s\n * @type {}\n * @private\n * @since\n * \n */\n %s: ,\n\n" varname varname))
			      ))	   
 	    (global-set-key (kbd "C-: C-o") 
			    (lambda ()
			      (interactive)
			      (setq func-name (read-string "auto generate function define, Input function name :"))
			      (insert (format "/**\n * @method %s\n * @private\n * @since\n * \n * @param {} \n * \n * @return {} \n */\n %s: function() {\n\n}" func-name func-name))
			      ))
	    (global-set-key (kbd "C-: C-;") 
			    (lambda ()
			      (interactive)
			      (setq module-name (read-string "module define, Input module name :"))
			      (insert (format "\n/**\n * @singleton\n * @aside guide %s\n * @author Copyright %s Chen Han. All rights reserved\n *\n * @description\n *\n * ## Examples\n * ###\n * @example\n */\n" module-name (format-time-string "%Y")))
			      ))
	    (global-set-key (kbd "C-: TAB") 
			    (lambda ()
			      (interactive)
			      (let ((inputed-tuple (split-string (read-string "insert for (v[ar]/f[unc]/c[lass])[:name]? ") ":")))
				(setq mode (car inputed-tuple))
				(setq name (cadr inputed-tuple))
				(cond ((null mode)
				       (message "nothing inputed!"))
				      ((equal mode "v")
				       (insert (format "/**\n * @member \n * @property %s\n * @type {}\n * @private\n * @since\n * \n */\n" name)))
				      ((equal mode "f")
				       (insert (format "/**\n * @method %s\n * @private\n * @since\n * \n * @param {} \n * \n * @return {} \n */\n" name)))
				      ((equal mode "c")
				       (insert (format "\n/**\n * @singleton\n * @aside guide %s\n * @author Copyright (c) %s Chen Han. All rights reserved\n *\n * @description\n *\n * ## Examples\n * ###\n * @example\n */\n" name (format-time-string "%Y"))))
				      (t nil)
				      ))))
	    ))

(set-background-color "black")
(set-foreground-color "white")
(set-face-foreground 'region "green")
(set-face-background 'region "blue")
(set-default-font "Monospace 12")


